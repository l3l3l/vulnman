{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vulnman Documentation Vulnman is a penetration test and vulnerability management application. It provides a web interface to create pentesting projects, manage the associated hosts, services and applications, vulnerabilities and reports. The generated reports are served as PDF files. Warning This project is in a very early stage. You may not want to use it in production. The Web-UI will be polished once a backend functionality is more stable and complete. Getting Started Glossary Features Installation Source Code All source code is available on Github .","title":"Home"},{"location":"#vulnman-documentation","text":"Vulnman is a penetration test and vulnerability management application. It provides a web interface to create pentesting projects, manage the associated hosts, services and applications, vulnerabilities and reports. The generated reports are served as PDF files. Warning This project is in a very early stage. You may not want to use it in production. The Web-UI will be polished once a backend functionality is more stable and complete.","title":"Vulnman Documentation"},{"location":"#getting-started","text":"Glossary Features Installation","title":"Getting Started"},{"location":"#source-code","text":"All source code is available on Github .","title":"Source Code"},{"location":"advanced/plugin_system/","text":"Plugin System Vulnman has a plugin system that is used to process external tool reports. The vulnman-cli is rewriting the commands to match the required format for later processing in the background. The vulnman-server finally processes all incoming tool results and maps the findings into its database models. Built-In Plugins The \"Example Commands\" provided below are only required, if you upload the results directly without using the vulnman-cli . Tool Example Command Version Added nmap nmap -sV -sC -oX exmaple.xml example.com 0.2.2 subfinder subfinder -d example.com | tee subfinder.txt 0.2.2 Gobuster (DNS) gobuster dns -d example.com -w subdomains.txt | tee gobuster.dns.txt 0.2.2 Gobuster (Dir) gobuster dir -u http://example.com -w common.txt | tee gobuster.dir.txt 0.2.2 Gobuster (Vhost) gobuster vhost -u http://example.com -w subdomains.txt | tee gobuster.vhost.txt 0.2.2 aiodnsbrute aiodnsbrute -w wordlist.txt example.com | tee aiodnsbrute.txt 0.2.2 fierce fierce -domain example.com | tee fierce.txt 0.2.2 infoga infoga --domain example.com -r infoga.txt 0.2.2 BurpSuite Pro (XML) - 0.2.2 nuclei nuclei -json -nc -o results.json -u http://localhost -t nuclei-templates 0.2.2 testssl testssl -oj results.json https://example.com 0.2.2 Writing your own Plugins The plugin consists of two parts: The part that processes the (raw) output of the tool. This is currently happening on the server (see #60 ). The second part is the plugin that handles the command rewrite and ensures all required arguments exist. This part is currently really lightweight and easy to write. This tutorial will create the gobuster dns plugin. Parser First, you need to create a python package. This example uses the default location of the built-in parsers ( tools/parsers/ ). Add your tool to your settings file file like shown below: CUSTOM_EXTERNAL_TOOLS = { \"gobuster-dns\": \"tools.parsers.gobuster.GobusterDNS\" } This is how the final plugin looks like: import re from vulnman.utils.tools import ToolResultParser class GobusterDNS(ToolResultParser): \"\"\" Example Command: ``gobuster dns -w subdomains.txt -d example.com | tee gobuster-dns.txt`` \"\"\" tool_name = \"gobuster dns\" def parse(self, result, project, creator, command=None): for item in re.findall(r\"(Found: )(.*)\", result): ip = self._resolve(item[1]) if ip: host, _created = self._get_or_create_host(ip, project, creator, command=command) _hostname, _created = self._get_or_create_hostname(item[1], host, project, creator, command=command) CLI This is the most easy part in writing your own plugins. If your plugin can be processed without writing the results to a temporary file and does not need any special flags to be set, this is how a plugin will look: from vulnman_plugins import plugin class Subfinder(plugin.Plugin): _alias_ = 'subfinder' def setup(self): pass The nuclei plugin for example, requires some special flags to be set, to write the results to a json file. The following code shows how you can enforce such a command rewrite. from vulnman_plugins import plugin class Nuclei(plugin.Plugin): _alias_ = 'nuclei' def setup(self): self.required_arguments = [ plugin.Argument(\"-json\", has_value=False), plugin.Argument(\"-o\", is_filepath=True), plugin.Argument(\"-nc\", has_value=False) ] self.use_temp_file = True This part of the plugin needs to be added to the vulnman_plugins package.","title":"Plugin System"},{"location":"advanced/plugin_system/#plugin-system","text":"Vulnman has a plugin system that is used to process external tool reports. The vulnman-cli is rewriting the commands to match the required format for later processing in the background. The vulnman-server finally processes all incoming tool results and maps the findings into its database models.","title":"Plugin System"},{"location":"advanced/plugin_system/#built-in-plugins","text":"The \"Example Commands\" provided below are only required, if you upload the results directly without using the vulnman-cli . Tool Example Command Version Added nmap nmap -sV -sC -oX exmaple.xml example.com 0.2.2 subfinder subfinder -d example.com | tee subfinder.txt 0.2.2 Gobuster (DNS) gobuster dns -d example.com -w subdomains.txt | tee gobuster.dns.txt 0.2.2 Gobuster (Dir) gobuster dir -u http://example.com -w common.txt | tee gobuster.dir.txt 0.2.2 Gobuster (Vhost) gobuster vhost -u http://example.com -w subdomains.txt | tee gobuster.vhost.txt 0.2.2 aiodnsbrute aiodnsbrute -w wordlist.txt example.com | tee aiodnsbrute.txt 0.2.2 fierce fierce -domain example.com | tee fierce.txt 0.2.2 infoga infoga --domain example.com -r infoga.txt 0.2.2 BurpSuite Pro (XML) - 0.2.2 nuclei nuclei -json -nc -o results.json -u http://localhost -t nuclei-templates 0.2.2 testssl testssl -oj results.json https://example.com 0.2.2","title":"Built-In Plugins"},{"location":"advanced/plugin_system/#writing-your-own-plugins","text":"The plugin consists of two parts: The part that processes the (raw) output of the tool. This is currently happening on the server (see #60 ). The second part is the plugin that handles the command rewrite and ensures all required arguments exist. This part is currently really lightweight and easy to write. This tutorial will create the gobuster dns plugin.","title":"Writing your own Plugins"},{"location":"advanced/plugin_system/#parser","text":"First, you need to create a python package. This example uses the default location of the built-in parsers ( tools/parsers/ ). Add your tool to your settings file file like shown below: CUSTOM_EXTERNAL_TOOLS = { \"gobuster-dns\": \"tools.parsers.gobuster.GobusterDNS\" } This is how the final plugin looks like: import re from vulnman.utils.tools import ToolResultParser class GobusterDNS(ToolResultParser): \"\"\" Example Command: ``gobuster dns -w subdomains.txt -d example.com | tee gobuster-dns.txt`` \"\"\" tool_name = \"gobuster dns\" def parse(self, result, project, creator, command=None): for item in re.findall(r\"(Found: )(.*)\", result): ip = self._resolve(item[1]) if ip: host, _created = self._get_or_create_host(ip, project, creator, command=command) _hostname, _created = self._get_or_create_hostname(item[1], host, project, creator, command=command)","title":"Parser"},{"location":"advanced/plugin_system/#cli","text":"This is the most easy part in writing your own plugins. If your plugin can be processed without writing the results to a temporary file and does not need any special flags to be set, this is how a plugin will look: from vulnman_plugins import plugin class Subfinder(plugin.Plugin): _alias_ = 'subfinder' def setup(self): pass The nuclei plugin for example, requires some special flags to be set, to write the results to a json file. The following code shows how you can enforce such a command rewrite. from vulnman_plugins import plugin class Nuclei(plugin.Plugin): _alias_ = 'nuclei' def setup(self): self.required_arguments = [ plugin.Argument(\"-json\", has_value=False), plugin.Argument(\"-o\", is_filepath=True), plugin.Argument(\"-nc\", has_value=False) ] self.use_temp_file = True This part of the plugin needs to be added to the vulnman_plugins package.","title":"CLI"},{"location":"advanced/rest_api/","text":"REST-API Vulnman has a REST-API. You can access the swagger documentation at http://yourserver.com/api/v1/swagger .","title":"REST-API"},{"location":"advanced/rest_api/#rest-api","text":"Vulnman has a REST-API. You can access the swagger documentation at http://yourserver.com/api/v1/swagger .","title":"REST-API"},{"location":"advanced/agents/","text":"Agents Vulnman-Agents allow your pentest automation to scale. There are some scenarios where you may want to run different command from different hosts. You can also define a set of commands that you usually run at the enumeration phase and queue them to be executed and parsed by the Plugin System . There is a vulnman-agent in development which does exactly that. The agent is kept as simple as possible. Warning The agent linked above is currently a proof of concept implementation and is not meant to be production-ready. Agents are polling a REST-API endpoint that contains a list of commands that need to be executed. The results of the command is uploaded through another REST-API endpoint after the command results are available. Create an Agent In the current state only vulnman administrators are allowed to create agents. You can create a new agent using the following management command: python manage.py create_agent admin testagent You need to replace \"admin\" with the username this agent belongs to. Replace \"testagent\" with the desired agent name.","title":"Agents"},{"location":"advanced/agents/#agents","text":"Vulnman-Agents allow your pentest automation to scale. There are some scenarios where you may want to run different command from different hosts. You can also define a set of commands that you usually run at the enumeration phase and queue them to be executed and parsed by the Plugin System . There is a vulnman-agent in development which does exactly that. The agent is kept as simple as possible. Warning The agent linked above is currently a proof of concept implementation and is not meant to be production-ready. Agents are polling a REST-API endpoint that contains a list of commands that need to be executed. The results of the command is uploaded through another REST-API endpoint after the command results are available.","title":"Agents"},{"location":"advanced/agents/#create-an-agent","text":"In the current state only vulnman administrators are allowed to create agents. You can create a new agent using the following management command: python manage.py create_agent admin testagent You need to replace \"admin\" with the username this agent belongs to. Replace \"testagent\" with the desired agent name.","title":"Create an Agent"},{"location":"advanced/customize/css/","text":"CSS-Theme Put your CSS theme in the static/css/themes directory. The file name must end with min.css . Since vulnman is using Bootstrap 5 , you can use any bootstrap theme you want. To change the CSS theme you need to change VULNMAN_CSS_THEME setting in your settings file . Built In Themes Vulnman comes with the following themes built in. vulnman-dark (default) bootstrap-dark flatly","title":"CSS"},{"location":"advanced/customize/css/#css-theme","text":"Put your CSS theme in the static/css/themes directory. The file name must end with min.css . Since vulnman is using Bootstrap 5 , you can use any bootstrap theme you want. To change the CSS theme you need to change VULNMAN_CSS_THEME setting in your settings file .","title":"CSS-Theme"},{"location":"advanced/customize/css/#built-in-themes","text":"Vulnman comes with the following themes built in. vulnman-dark (default) bootstrap-dark flatly","title":"Built In Themes"},{"location":"advanced/customize/report/","text":"Customize Report Change Report Template Change the REPORTING_TEMPLATE setting in your settings file . HTML Reports You can create your own HTML report templates following this tutorial. First create the directory for the template: mkdir custom/report_templates/my_template Create the following directories in there: - contents - sections The main report file is called report.html and needs to be created inside your template directory. Next, create the report python class in custom/report_templates/my_template.py with the following example content: import os from django.conf import settings from apps.reporting.utils.report_template import ReportSection, ReportTemplate class MyReportTemplate(ReportTemplate): name = \"my-html-template\" template_directory = os.path.join(settings.BASE_DIR, \"custom/report_templates/my_template\") sections = [ ReportSection(\"Cover\", \"cover.html\", None), ReportSection(\"Methodology\", \"generic_md_section.html\", \"default.md\"), ReportSection(\"Vulnerability Overview\", \"vulnerability_overview.html\", None), ReportSection(\"Vulnerability Listing\", \"vulnerability_listing.html\", None) ] stylesheets = [ \"report.css\" ] If you want to use CSS stylesheets, create the report.css file inside your template directory. Misc HTML reports can contain Markdown sections. You can even use django's template language inside your markdown files. This will only be rendered on initial report creation and will not be used on report editing to prevent SSTI vulnerabilities.","title":"Report"},{"location":"advanced/customize/report/#customize-report","text":"","title":"Customize Report"},{"location":"advanced/customize/report/#change-report-template","text":"Change the REPORTING_TEMPLATE setting in your settings file .","title":"Change Report Template"},{"location":"advanced/customize/report/#html-reports","text":"You can create your own HTML report templates following this tutorial. First create the directory for the template: mkdir custom/report_templates/my_template Create the following directories in there: - contents - sections The main report file is called report.html and needs to be created inside your template directory. Next, create the report python class in custom/report_templates/my_template.py with the following example content: import os from django.conf import settings from apps.reporting.utils.report_template import ReportSection, ReportTemplate class MyReportTemplate(ReportTemplate): name = \"my-html-template\" template_directory = os.path.join(settings.BASE_DIR, \"custom/report_templates/my_template\") sections = [ ReportSection(\"Cover\", \"cover.html\", None), ReportSection(\"Methodology\", \"generic_md_section.html\", \"default.md\"), ReportSection(\"Vulnerability Overview\", \"vulnerability_overview.html\", None), ReportSection(\"Vulnerability Listing\", \"vulnerability_listing.html\", None) ] stylesheets = [ \"report.css\" ] If you want to use CSS stylesheets, create the report.css file inside your template directory.","title":"HTML Reports"},{"location":"advanced/customize/report/#misc","text":"HTML reports can contain Markdown sections. You can even use django's template language inside your markdown files. This will only be rendered on initial report creation and will not be used on report editing to prevent SSTI vulnerabilities.","title":"Misc"},{"location":"getting_started/features/","text":"Features Multiple Projects Manage found Hosts, Services, Vulnerabilities and other Findings during a scan Collaborate with other users on the same project with different permission roles Report generation HTML Report Templates (recommended) LaTeX Report Templates (requires LaTeX environment on host; some issues rendering Markdown!) PDF export Multiple revisions with changelogs Edit Report after creation Vulnerability Management Project Dashboard with charts Vulnerability Templates Import from CWE XML files Import from JSON files CVSS Calculator Write vulnerability information Markdown Command Builder Organize your commonly used commands and build them to match your target Track credentials found during an engagement Command Line Interface to send commands directly to your vulnman server. Manage Tasks during a pentest (create tasks from templates) REST-API","title":"Features"},{"location":"getting_started/features/#features","text":"Multiple Projects Manage found Hosts, Services, Vulnerabilities and other Findings during a scan Collaborate with other users on the same project with different permission roles Report generation HTML Report Templates (recommended) LaTeX Report Templates (requires LaTeX environment on host; some issues rendering Markdown!) PDF export Multiple revisions with changelogs Edit Report after creation Vulnerability Management Project Dashboard with charts Vulnerability Templates Import from CWE XML files Import from JSON files CVSS Calculator Write vulnerability information Markdown Command Builder Organize your commonly used commands and build them to match your target Track credentials found during an engagement Command Line Interface to send commands directly to your vulnman server. Manage Tasks during a pentest (create tasks from templates) REST-API","title":"Features"},{"location":"getting_started/glossary/","text":"Glossary This section will give a short overview about the terminology used within the vulnman applications. Components Vulnman Server The vulnman server is the key part of the vulnman applications. It is the part between you and the database which stores all results behind the scenes. Vulnman Cli The vulnman cli is a command line interface that you can use like a terminal to send results of different command directly to your vulnman server. Vulnman Agent TODO Classes Client A client is your customer who has hired you for a security analysis. Project A project can be seen as an engagement. Finding A finding is an object that is worth tracking but not a vulnerability (e.g. a Web Application). Findings are not part of the report Vulnerability A vulnerability is a security issue that has an impact on your client. Vulnerabilities can be excluded from the report, if needed.","title":"Glossary"},{"location":"getting_started/glossary/#glossary","text":"This section will give a short overview about the terminology used within the vulnman applications.","title":"Glossary"},{"location":"getting_started/glossary/#components","text":"Vulnman Server The vulnman server is the key part of the vulnman applications. It is the part between you and the database which stores all results behind the scenes. Vulnman Cli The vulnman cli is a command line interface that you can use like a terminal to send results of different command directly to your vulnman server. Vulnman Agent TODO","title":"Components"},{"location":"getting_started/glossary/#classes","text":"Client A client is your customer who has hired you for a security analysis. Project A project can be seen as an engagement. Finding A finding is an object that is worth tracking but not a vulnerability (e.g. a Web Application). Findings are not part of the report Vulnerability A vulnerability is a security issue that has an impact on your client. Vulnerabilities can be excluded from the report, if needed.","title":"Classes"},{"location":"getting_started/configuration/","text":"Configure Vulnman Server Database PostgreSQL DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'HOST': 'db', 'NAME': 'vulnman', 'USER': 'vulnman_db_user', 'PASSWORD': 'dontusethispassword', } }","title":"Configuration"},{"location":"getting_started/configuration/#configure-vulnman-server","text":"","title":"Configure Vulnman Server"},{"location":"getting_started/configuration/#database","text":"","title":"Database"},{"location":"getting_started/configuration/#postgresql","text":"DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'HOST': 'db', 'NAME': 'vulnman', 'USER': 'vulnman_db_user', 'PASSWORD': 'dontusethispassword', } }","title":"PostgreSQL"},{"location":"getting_started/installation/cli/","text":"Install Vulnman CLI The Vulnman command line interface allows you to execute your commands with a UX similar to the one you would have without. All you have to do is to add the \"shell\" command in front of your command. The command, the return code and the results will be pushed into your current active project command history. If there is a plugin for the tool you used, the output will be parsed and hosts, services and vulnerabilities will be created according to the results. Arch-Linux git clone https://github.com/vulnman/vulnman-cli.git cd vulnman-cli pip install . You can now run vulnman-cli by running vulnman-cli .","title":"Vulnman CLI"},{"location":"getting_started/installation/cli/#install-vulnman-cli","text":"The Vulnman command line interface allows you to execute your commands with a UX similar to the one you would have without. All you have to do is to add the \"shell\" command in front of your command. The command, the return code and the results will be pushed into your current active project command history. If there is a plugin for the tool you used, the output will be parsed and hosts, services and vulnerabilities will be created according to the results.","title":"Install Vulnman CLI"},{"location":"getting_started/installation/cli/#arch-linux","text":"git clone https://github.com/vulnman/vulnman-cli.git cd vulnman-cli pip install . You can now run vulnman-cli by running vulnman-cli .","title":"Arch-Linux"},{"location":"getting_started/installation/server/","text":"Install Vulnman Server Without Docker Requirements Fedora sudo dnf install python3 nginx git sudo pip install -r requirements.txt Arch-Linux sudo pacman -Sy python nginx git sudo pip install -r requirements.txt Prepare First we fetch the source code. mkdir /opt/vulnman-server git clone https://github.com/vulnman/vulnman.git cd /opt/vulnman-server Configure Database The default settings will use a sqlite database. If you are fine with this you can continue with this tutorial. Otherwise, you may want to read how to configure your installation. Initializing Database python manage.py migrate python manage.py collectstatic python manage.py createupseruser Systemd Service If you want to run the vulnman-server using systemd, you can paste the following content into the /etc/systemd/system/vulnman-server.service file. [Unit] Description=vulnman server After=network.target [Service] User=user Group=user WorkingDirectory=/opt/vulnman-server ExecStart=gunicorn --bind 127.0.0.1:8000 vulnman.wsgi [Install] WantedBy=multi-user.target To enable the service on boot and start the vulnman service, you can use the following commands: sudo systemctl start vulnman-server sudo systemctl enable vulnman-server Setup Nginx Paste the following content into the /etc/nginx/sites-enabled/vulnman.conf file server { listen 80; return https://$host$request_uri; } server { listen 443 ssl; ssl_certificate_key /etc/ssl/your_cert.key; ssl_certificate /etc/ssl/your_cert.crt; ssl_protocols TLSv1.3; location / { proxy_pass http://127.0.0.1:8000; } } With docker-compose Adjust the credentials and paths in the docker-compose.yml file. For the docker image to work, you need to set up vulnman to use a postgres database . You can start all containers with the following command: sudo docker-compose up --build","title":"Vulnman Server"},{"location":"getting_started/installation/server/#install-vulnman-server","text":"","title":"Install Vulnman Server"},{"location":"getting_started/installation/server/#without-docker","text":"","title":"Without Docker"},{"location":"getting_started/installation/server/#requirements","text":"","title":"Requirements"},{"location":"getting_started/installation/server/#fedora","text":"sudo dnf install python3 nginx git sudo pip install -r requirements.txt","title":"Fedora"},{"location":"getting_started/installation/server/#arch-linux","text":"sudo pacman -Sy python nginx git sudo pip install -r requirements.txt","title":"Arch-Linux"},{"location":"getting_started/installation/server/#prepare","text":"First we fetch the source code. mkdir /opt/vulnman-server git clone https://github.com/vulnman/vulnman.git cd /opt/vulnman-server","title":"Prepare"},{"location":"getting_started/installation/server/#configure-database","text":"The default settings will use a sqlite database. If you are fine with this you can continue with this tutorial. Otherwise, you may want to read how to configure your installation.","title":"Configure Database"},{"location":"getting_started/installation/server/#initializing-database","text":"python manage.py migrate python manage.py collectstatic python manage.py createupseruser","title":"Initializing Database"},{"location":"getting_started/installation/server/#systemd-service","text":"If you want to run the vulnman-server using systemd, you can paste the following content into the /etc/systemd/system/vulnman-server.service file. [Unit] Description=vulnman server After=network.target [Service] User=user Group=user WorkingDirectory=/opt/vulnman-server ExecStart=gunicorn --bind 127.0.0.1:8000 vulnman.wsgi [Install] WantedBy=multi-user.target To enable the service on boot and start the vulnman service, you can use the following commands: sudo systemctl start vulnman-server sudo systemctl enable vulnman-server","title":"Systemd Service"},{"location":"getting_started/installation/server/#setup-nginx","text":"Paste the following content into the /etc/nginx/sites-enabled/vulnman.conf file server { listen 80; return https://$host$request_uri; } server { listen 443 ssl; ssl_certificate_key /etc/ssl/your_cert.key; ssl_certificate /etc/ssl/your_cert.crt; ssl_protocols TLSv1.3; location / { proxy_pass http://127.0.0.1:8000; } }","title":"Setup Nginx"},{"location":"getting_started/installation/server/#with-docker-compose","text":"Adjust the credentials and paths in the docker-compose.yml file. For the docker image to work, you need to set up vulnman to use a postgres database . You can start all containers with the following command: sudo docker-compose up --build","title":"With docker-compose"},{"location":"getting_started/upgrade/server/","text":"Update Vulnman Server To update vulnman you just need to follow the steps in this section. Update the codebase: git pull You should check the settings file for new settings you need to apply. Get the new database changes: python manage.py migrate","title":"Vulnman Server"},{"location":"getting_started/upgrade/server/#update-vulnman-server","text":"To update vulnman you just need to follow the steps in this section. Update the codebase: git pull You should check the settings file for new settings you need to apply. Get the new database changes: python manage.py migrate","title":"Update Vulnman Server"},{"location":"misc/products/","text":"Other Products Bootstrap 5.0.1 jquery 3.5.1 Forkawesome 1.1.7 chart.js 3.6.0 Codemirror 5.64.0","title":"Other Products"},{"location":"misc/products/#other-products","text":"Bootstrap 5.0.1 jquery 3.5.1 Forkawesome 1.1.7 chart.js 3.6.0 Codemirror 5.64.0","title":"Other Products"},{"location":"usage/create_client/","text":"","title":"Create Client"},{"location":"usage/permissions/","text":"Permissions and Groups Vulnman comes with the following default groups and permission levels: management The management group members are allowed to list projects and clients. The management is allowed to create and update projects. pentester The members of the pentester group do not have any permission on default. A member of the management group need to assign a pentester to a project. A pentester is able to add content (e.g. vulnerabilities) to their projects.","title":"Permissions and Groups"},{"location":"usage/permissions/#permissions-and-groups","text":"Vulnman comes with the following default groups and permission levels: management The management group members are allowed to list projects and clients. The management is allowed to create and update projects. pentester The members of the pentester group do not have any permission on default. A member of the management group need to assign a pentester to a project. A pentester is able to add content (e.g. vulnerabilities) to their projects.","title":"Permissions and Groups"},{"location":"usage/reporting/","text":"Reporting Vulnman can create reports based on the information and vulnerabilities you found during a penetration test. The report is provided as PDF. You can customize the report template that is used to build the PDF file. The following types of report templates are currently supported: HTML (recommended) LaTeX Create Report through Web Interface","title":"Reporting"},{"location":"usage/reporting/#reporting","text":"Vulnman can create reports based on the information and vulnerabilities you found during a penetration test. The report is provided as PDF. You can customize the report template that is used to build the PDF file. The following types of report templates are currently supported: HTML (recommended) LaTeX","title":"Reporting"},{"location":"usage/reporting/#create-report-through-web-interface","text":"","title":"Create Report through Web Interface"},{"location":"usage/cli/","text":"CLI - Usage If you are into the vulnman-cli, you first want to log into your server, by entering the following command. login <username> <password> You can specify an optional server using the --server flag. Load a project using the following command. load_project <project_id> At the current state, you must get the uuid from the REST-API or the project dashboard . All commands that you are prefixing with vman are processed by the vulnman server.","title":"CLI"},{"location":"usage/cli/#cli-usage","text":"If you are into the vulnman-cli, you first want to log into your server, by entering the following command. login <username> <password> You can specify an optional server using the --server flag. Load a project using the following command. load_project <project_id> At the current state, you must get the uuid from the REST-API or the project dashboard . All commands that you are prefixing with vman are processed by the vulnman server.","title":"CLI - Usage"},{"location":"usage/vulnerability_management/import_templates/","text":"Import Vulnerability Templates Vulnman allows you to create vulnerabilities based on templates. Import CWE Database You can import CWE database by downloading the CWE XML and pass the file to the import_cwe management command. python manage.py import_cwe cwec_v4.4.xml Import from JSON You can import templates using JSON files from external resources. python manage.py import_vulnerability_templates resources/vulnerability_templates.json","title":"Import Vulnerability Templates"},{"location":"usage/vulnerability_management/import_templates/#import-vulnerability-templates","text":"Vulnman allows you to create vulnerabilities based on templates.","title":"Import Vulnerability Templates"},{"location":"usage/vulnerability_management/import_templates/#import-cwe-database","text":"You can import CWE database by downloading the CWE XML and pass the file to the import_cwe management command. python manage.py import_cwe cwec_v4.4.xml","title":"Import CWE Database"},{"location":"usage/vulnerability_management/import_templates/#import-from-json","text":"You can import templates using JSON files from external resources. python manage.py import_vulnerability_templates resources/vulnerability_templates.json","title":"Import from JSON"}]}